<?php

namespace App\Http\Controllers;

use App\Models\ProductionOrder;
use App\Models\Asset;
use App\Models\Operation;
use App\Models\FinishedOrder;
use App\Models\Setting;
use App\Models\ListedOperation;
use App\Models\RawMaterial;
use App\Models\Consumable;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\DB;
use SimpleSoftwareIO\QrCode\Facades\QrCode;
use Barryvdh\DomPDF\Facade\Pdf;

class ProductionOrderController extends Controller
{
    // Display the create production order form
    public function create(Request $request)
    {
        session()->forget('wo_number'); // Clear any previous WO number from session
        return view('production.create');
    }

    // Store a newly created production order in storage
    public function store(Request $request)
    {
        // Validate the request data
        $validatedData = $this->validateRequest($request);
        Log::info('Request Data:', ['request' => $request->all()]);

    
        // Check if a lot size greater than 1 or if asset number is provided for manual input
        if (empty($validatedData['asset_no_input']) && empty($validatedData['generated_asset_no']) && $validatedData['lot_size'] <= 1) {
            return redirect()->route('production.create')
                ->withErrors('Please provide an asset number (manual input) or ensure a lot size greater than 1 for system generation.')
                ->withInput();
        }
    

    
        // Start a database transaction
        DB::beginTransaction();
        try {
            // Create the Production Order
            $productionOrder = ProductionOrder::create($validatedData);
    
            // Save the operations data for the production order
            $this->saveOperations($productionOrder, $validatedData['operations_data']);
    
            // Log for debugging
            Log::info('Validated Data:', ['data' => $validatedData]);
    
            // Check and log asset_no_input to make sure it's received
            Log::info('Asset Input Data:', ['asset_no_input' => $validatedData['asset_no_input']]);
    
            // Handle Asset creation based on manual input or generated assets
            if (!empty($validatedData['asset_no_input'])) {
                Log::info('Manual asset numbers input:', ['input' => $validatedData['asset_no_input']]);
                $assetNumbers = explode(',', $validatedData['asset_no_input']);
                
                foreach ($assetNumbers as $assetNo) {
                    $assetNo = trim($assetNo); // Clean up any extra spaces
    
                    // Create asset record for each manually inputted asset number
                    Asset::create([
                        'asset_no' => $assetNo,
                        'wo_id' => $productionOrder->id,
                        'generated_by_system' => false, // Indicating it's manually input
                    ]);
    
                    // Log each asset creation for debugging
                    Log::info('Asset created manually', ['asset_no' => $assetNo, 'wo_id' => $productionOrder->id]);
                }
            } elseif (!empty($validatedData['generated_asset_no'])) {
                // Handle system-generated asset numbers (comma-separated)
                Log::info('Generated asset numbers:', ['generated_asset_no' => $validatedData['generated_asset_no']]);
                $generatedAssetNumbers = explode(',', $validatedData['generated_asset_no']);
                
                foreach ($generatedAssetNumbers as $assetNo) {
                    $assetNo = trim($assetNo); // Clean up any extra spaces
    
                    // Create asset record for each generated asset number
                    Asset::create([
                        'asset_no' => $assetNo,
                        'wo_id' => $productionOrder->id,
                        'generated_by_system' => true, // Indicating it's generated by the system
                    ]);
    
                    // Log each asset creation for debugging
                    Log::info('Asset created by system', ['asset_no' => $assetNo, 'wo_id' => $productionOrder->id]);
                }
            }

                // Handle Raw Materials
        if (!empty($validatedData['raw_materials'])) {
            foreach ($validatedData['raw_materials'] as $rawMaterial) {
                RawMaterial::create([
                    'wo_id' => $productionOrder->id,
                    'fo_id' => $rawMaterial['fo_id'] ?? null,
                    'grade' => $rawMaterial['grade'],
                    'size' => $rawMaterial['size'],
                    'length' => $rawMaterial['length'],
                    'hn_bar_tno' => $rawMaterial['hn_bar_tno'],
                ]);
            }
        }

        // Handle Consumables
        if (!empty($validatedData['consumables'])) {
            foreach ($validatedData['consumables'] as $consumable) {
                Consumable::create([
                    'wo_id' => $productionOrder->id,
                    'fo_id' => $consumable['fo_id'] ?? null,
                    'type' => $consumable['type'],
                    'quantity' => $consumable['quantity'],
                    'uom' => $consumable['uom'],
                ]);
            }
        }

    
            // Commit the transaction if everything is successful
            DB::commit();
    
            // Redirect with success message
            return redirect()->route('production.create')->with([
                'success' => 'Production Order created successfully!',
                'wo_number' => $productionOrder->wo_number,
            ]);
        } catch (\Exception $e) {
            // Rollback transaction if an error occurs
            DB::rollBack();
    
            // Log the error for debugging
            Log::error('Failed to create Production Order', [
                'error' => $e->getMessage(),
                'request_data' => $request->all(),
            ]);
    
            // Redirect with error message
            return redirect()->route('production.create')
                ->withErrors('Failed to create Production Order. Please try again later.')
                ->withInput();
        }
    }
    

    
    public function show($wo_number)
    {
        // Fetch the production order with its related operations, assets, raw materials, and consumables
        $order = ProductionOrder::where('wo_number', $wo_number)
                    ->with(['operations', 'assets', 'rawMaterials', 'consumables'])  // Eager loading operations, assets, raw materials, and consumables
                    ->firstOrFail();
    
        // Log the assets, raw materials, and consumables data to debug if data is returned
        Log::info('Assets Data:', $order->assets->toArray());
        Log::info('Raw Materials Data:', $order->rawMaterials->toArray());
        Log::info('Consumables Data:', $order->consumables->toArray());
    
        // Return view with the necessary data
        return view('production.show', [
            'data' => [
                'wo_number' => $order->wo_number,
                'so_number' => $order->so_number,
                'cust_po_number' => $order->cust_po_number,
                'customer' => $order->customer,
                'order_date' => $order->order_date,
                'required_date' => $order->required_date,
                'job_scope' => $order->job_scope,
                'part_description' => $order->part_description,
                'drawing_no' => $order->drawing_no,
                'asset_no' => $order->assets->pluck('asset_no')->join(', '),  // Join assets by comma for display
                'lot_size' => $order->lot_size,
                'quantity_fulfilled' => $order->quantity_fulfilled,
                'operations' => $order->operations->toArray(),
                'assets' => $order->assets,  // Pass the assets collection
                'raw_materials' => $order->rawMaterials,  // Pass the raw materials collection
                'consumables' => $order->consumables,  // Pass the consumables collection
            ]
        ]);
    }
    
    // Fetch and display released productions
    public function showReleasedProductions()
    {
        $productionOrders = ProductionOrder::with('operations')->get();
        return view('production.released', compact('productionOrders'));
    }

    // Fetch active operations from the database
    public function getActiveOperations()
    {
        $activeOperations = Operation::where('status', 'In Progress')->get();
        return response()->json($activeOperations);
    }

    // Display the kiosk view
    public function kiosk()
    {
        return view('production.kiosk');
    }

    // Validate the incoming request data
    private function validateRequest(Request $request)
    {
        

        return $request->validate([
            'so_number' => 'required|string',
            'cust_po_number' => 'required|string',
            'customer' => 'required|string',
            'order_date' => 'required|date',
            'required_date' => 'required|date|after:order_date',
            'job_scope' => 'required|string',
            'part_description' => 'required|string',
            'drawing_no' => 'nullable|string',
            'asset_no' => 'nullable|string',
            'asset_no_input' => 'nullable|string',  // Add this line for manual asset input
            'lot_size' => 'required|integer|min:1|max:99',
            'operations_data' => 'required|json',
            'wo_number' => 'nullable|string',
            'generated_asset_no' => 'nullable|string',  // If you are handling generated assets separately
            // Validation for raw materials
            'raw_materials' => 'nullable|array',
            'raw_materials.*.grade' => 'required|string',
            'raw_materials.*.size' => 'required|string',
            'raw_materials.*.length' => 'required|string',
            'raw_materials.*.hn_bar_tno' => 'required|string',
             // Validation for consumables (each consumable is an object within an array)
            'consumables' => 'nullable|array', // consumables should be an array, but it can be empty (nullable)
            'consumables.*.type' => 'required|string', // Each consumable must have a 'type' as a required string
            'consumables.*.quantity' => 'required|numeric|min:1', // Quantity must be numeric and at least 1
            'consumables.*.uom' => 'required|string|in:kg,pcs,length', // UOM must be one of 'kg', 'pcs', or 'length'
        ]);
    }
    
private function generateWONumber($soNumber)
{
    $setting = Setting::first();  // Get the first setting (you can adjust as needed)
    $prefix = $setting->Prefix ?? 'DEFAULT';  // Use the prefix from the setting, or 'DEFAULT' if not found
    $currentYear = date('ym');  // Get the current year in 'yy' format
    
    // Find the highest WO number (across all SO numbers)
    $latestProductionOrder = ProductionOrder::orderBy('wo_number', 'desc')->first();
    $latestFinishedOrder = FinishedOrder::orderBy('wo_number', 'desc')->first();
    
    // Determine the highest WO number
    $highestWO = null;

    if ($latestProductionOrder && $latestFinishedOrder) {
        $highestWO = max($latestProductionOrder->wo_number, $latestFinishedOrder->wo_number);
    } elseif ($latestProductionOrder) {
        $highestWO = $latestProductionOrder->wo_number;
    } elseif ($latestFinishedOrder) {
        $highestWO = $latestFinishedOrder->wo_number;
    }

    // Extract the sequence and increment it
    $sequence = 1;  // Default sequence is 1
    if ($highestWO) {
        // If we have a latest WO number, split it and extract the sequence number
        $woNumberParts = explode('-', $highestWO);
        if (count($woNumberParts) >= 3) {
            // Increment the last part of the WO number
            $sequence = (int)$woNumberParts[2] + 1;
        }
    }

    // Generate the new WO number (e.g., tamillllan-2412-00003)
    $woNumber = sprintf('%s-%s-%05d', $prefix, $currentYear, $sequence);  // Format with 5 digits

    // Ensure no duplicates (check across both ProductionOrder and FinishedOrder)
    if (ProductionOrder::where('wo_number', $woNumber)->exists() || FinishedOrder::where('wo_number', $woNumber)->exists()) {
        throw new \Exception("WO Number $woNumber already exists.");
    }

    return $woNumber;
    }



    // Save operations related to the production order
    private function saveOperations($productionOrder, $operationsData)
    {
        $operations = json_decode($operationsData, true);

        if (json_last_error() !== JSON_ERROR_NONE) {
            throw new \Exception("Invalid JSON data for operations.");
        }

        foreach ($operations as $operation) {
            Log::info('Operation Data', $operation);  // Log operation data for debugging

            // Check if required fields exist
            if (!isset($operation['process']) || !isset($operation['workstation']) || !isset($operation['standardHours'])) {
                throw new \Exception("Missing required operation data.");
            }

            $productionOrder->operations()->create([
                'process' => $operation['process'],
                'workstation' => $operation['workstation'],
                'standard_hours' => $operation['standardHours'],
            ]);
        }
    }

 
    
    // Generate WO number via AJAX
    public function generateWONumberViaAjax(Request $request)
    {
        $validatedData = $request->validate(['so_number' => 'required|string']);

        try {
            $woNumber = $this->generateWONumber($validatedData['so_number']);
            session()->put('wo_number', $woNumber);
            return response()->json(['wo_number' => $woNumber]);
        } catch (\Exception $e) {
            return response()->json(['error' => $e->getMessage()], 500);
        }
    }

  

    public function update(Request $request, $wo_number)
{
    $data = ProductionOrder::where('wo_number', $wo_number)->first();

    // Validate input fields (excluding 'so_number' for read-only purpose)
    $validated = $request->validate([
        'so_number' => 'nullable|string', // This can be omitted or marked as 'nullable' because we are making it read-only.
        'cust_po_number' => 'nullable|string',
        'customer' => 'nullable|string',
        'order_date' => 'nullable|date',
        'required_date' => 'nullable|date',
        'job_scope' => 'nullable|string',
        'part_description' => 'nullable|string',
        'drawing_no' => 'nullable|string',
    ]);

    // Update the fields (so_number will not be updated)
    $data->so_number = $data->so_number;  // Leave so_number as it is, it will not be updated
    $data->cust_po_number = $request->cust_po_number ?? $data->cust_po_number;
    $data->customer = $request->customer ?? $data->customer;
    $data->order_date = $request->order_date ?? $data->order_date;
    $data->required_date = $request->required_date ?? $data->required_date;
    $data->job_scope = $request->job_scope ?? $data->job_scope;
    $data->part_description = $request->part_description ?? $data->part_description;
    $data->drawing_no = $request->drawing_no?? $data->drawing_no;
    // Save the changes
    $data->save();

    return redirect()->route('production.show', ['wo_number' => $wo_number])->with('success', 'Production order updated successfully.');
}

  // Generate report view for a production order
  public function generateReport($wo_number)
  {
      $data = ProductionOrder::with(['operations', 'assets'])
          ->where('wo_number', $wo_number)
          ->firstOrFail();
  
      return view('production.report', compact('data'));
  }
  

  // Export report to PDF


  public function exportReportToPDF($wo_number)
  {
      $data = ProductionOrder::with(['operations', 'assets'])
          ->where('wo_number', $wo_number)
          ->firstOrFail();
  
      // Generate PDF and initiate a download
      $pdf = PDF::loadView('production.report', compact('data'))
          ->setPaper('a4', 'portrait'); // Adjust paper size if needed
      
      // Initiate download with the filename
      return $pdf->download('production_order_report_' . $data->wo_number . '.pdf');
  }
  
  

  public function storeOperations(Request $request)
{
    $operations = $request->input('operations');
    $startingOperationNumber = 100;

    foreach ($operations as $index => &$operation) {
        $operation['operation_number'] = $startingOperationNumber + $index;
    }

    // Save operations with updated operation numbers
    // Your save logic here

    return redirect()->back()->with('success', 'Operations saved with sequential numbers starting from 100.');
}
public function index()
{
    // Count all finished orders (no condition)
    $finishedOrderCount = FinishedOrder::count();

    // Count all released production orders (no condition)
    $releasedOrderCount = ProductionOrder::count();

    // Pass these counts to the view
    return view('production.index', compact('finishedOrderCount', 'releasedOrderCount'));
}

public function transferToFinished(Request $request, $wo_number)
{
    // 1️⃣ Fetch the Production Order
    $productionOrder = ProductionOrder::where('wo_number', $wo_number)->firstOrFail();
    $lotSize = $productionOrder->lot_size;
    $quantityFulfilled = $productionOrder->quantity_fulfilled;

    // 2️⃣ Validate the Quantity
    $request->validate([
        'quantity' => 'required|integer|min:1|max:' . ($lotSize - $quantityFulfilled)
    ]);

    $quantity = $request->input('quantity');
    $quantityFulfilled += $quantity;

    // 3️⃣ FULL FULFILLMENT
    if ($quantityFulfilled >= $lotSize) {
        $generateReport = $request->input('generate_report') == 1;
        $userName = auth()->check() ? auth()->user()->name : 'Unknown User';

        // ✅ Create Finished Order
        $finishedOrder = FinishedOrder::create([
            'wo_number' => $productionOrder->wo_number,
            'so_number' => $productionOrder->so_number,
            'cust_po_number' => $productionOrder->cust_po_number,
            'customer' => $productionOrder->customer,
            'order_date' => $productionOrder->order_date,
            'required_date' => $productionOrder->required_date,
            'job_scope' => $productionOrder->job_scope,
            'part_description' => $productionOrder->part_description,
            'drawing_no' => $productionOrder->drawing_no,
            'lot_size' => $productionOrder->lot_size,
            'date_closed' => now(),
            'closed_by' => $userName,
        ]);

        //  Transfer Assets and opertion  from Production Order to Finished Order
        Asset::where('wo_id', $productionOrder->id)
            ->update(['wo_id' => null, 'fo_id' => $finishedOrder->id]);

            Operation::where('production_order_id', $productionOrder->id)  // Use the correct foreign key
            ->update([
                'finished_order_id' => $finishedOrder->id,   // Linking to Finished Order
                'production_order_id' => null,                 // Unlinking from Production Order
                'updated_at' => now(),                         // Update timestamp
            ]);
        

        $productionOrder->delete();

        if ($generateReport) {
            return redirect()->route('production.report.view', ['finishedOrder' => $finishedOrder->id]);
        }

        return redirect()->route('production.released')->with('success', 'Order fully transferred to Finished Orders.');
    } 
    // 4️⃣ PARTIAL FULFILLMENT
    else {
        $productionOrder->quantity_fulfilled = $quantityFulfilled;
        $productionOrder->save();

        // Update specific Assets to mark as partially fulfilled
        $assetIds = $request->input('asset_ids', []);
        if (!empty($assetIds)) {
            Asset::whereIn('id', $assetIds)
                ->update(['wo_id' => $productionOrder->id]);
        }

        $remainingQuantity = $lotSize - $quantityFulfilled;

        if ($request->input('generate_report') == 1) {
            return redirect()->route('production.report.partial_view', ['productionOrder' => $productionOrder->id]);
        }

        return redirect()->back()->with('success', 'Partial fulfillment updated. ' . $remainingQuantity . ' units remain.');
    }
}

public function showOrderDetails($wo_number)
{
    // Fetch the production order
    $productionOrder = ProductionOrder::where('wo_number', $wo_number)->firstOrFail();

    // Calculate remaining lot size
    $remainingLotSize = $productionOrder->lot_size - $productionOrder->quantity_fulfilled;

    // Pass the remaining lot size to the view
    return view('production.order_details', [
        'data' => $productionOrder,
        'remainingLotSize' => $remainingLotSize,
    ]);
}

public function showFinishedOrders()
{
        $finishedOrders = FinishedOrder::all();
        return view('production.finished', compact('finishedOrders'));
}

public function viewReport(FinishedOrder $finishedOrder)
{
    // Return the report view to preview
    return view('production.coc', compact('finishedOrder'));
}

public function viewPartialReport(ProductionOrder $productionOrder)
{
    // Check if the production order exists
    if (!$productionOrder) {
        return redirect()->route('production.index')->with('error', 'Production order not found.');
    }

    // You may need to pass data to the view here, such as the production order or fulfillment data
    return view('production.partial_coc', compact('productionOrder'));
}

public function showfinished($wo_number)
    {
        // Fetch the production order with its related operations and assets
        $order = FinishedOrder::where('wo_number', $wo_number)
                    ->with(['operations', 'assets'])  // Eager loading operations and assets
                    ->firstOrFail();
    
        // Log the assets data to debug if assets are returned
        Log::info('Assets Data:', $order->assets->toArray());
    
        // Return view with the necessary data
        return view('production.showfinished', [
            'finishedOrder' => $order, 
            'data' => [
                'wo_number' => $order->wo_number,
                'so_number' => $order->so_number,
                'cust_po_number' => $order->cust_po_number,
                'customer' => $order->customer,
                'order_date' => $order->order_date,
                'required_date' => $order->required_date,
                'job_scope' => $order->job_scope,
                'part_description' => $order->part_description,
                'drawing_no' => $order->drawing_no,
                'asset_no' => $order->assets->pluck('asset_no')->join(', '),  // Join assets by comma for display
                'lot_size' => $order->lot_size,
                'quantity_fulfilled' => $order->quantity_fulfilled,
                'operations' => $order->operations->toArray(),
                'assets' => $order->assets,  // Pass the assets collection
            ]
        ]);
    }
    // finished order to create PCR 
    public function generateFinishedOrderReport($wo_number)
{
    $data = FinishedOrder::with(['operations', 'assets'])
        ->where('wo_number', $wo_number)
        ->firstOrFail();
    
    return view('production.report_finished', compact('data'));
}

//pdf for finised order
public function exportReportToPDF2($wo_number)
  {
      $data = FinishedOrder::with(['operations', 'assets'])
          ->where('wo_number', $wo_number)
          ->firstOrFail();
  
      // Generate PDF and initiate a download
      $pdf = PDF::loadView('production.report_finished', compact('data'))
          ->setPaper('a4', 'portrait'); // Adjust paper size if needed
      
      // Initiate download with the filename
      return $pdf->download('production_order_report_' . $data->wo_number . '.pdf');
  }
  
    // Method to get all Listed Operations (GET request)
    public function getListedOperations()
    {
        $operations = ListedOperation::all(); // Get all operations
        return response()->json($operations); // Return as JSON response for the AJAX request
    }

    // Method to create a new Listed Operation (POST request)
    public function createNewOperation(Request $request)
    {
        // Validate the form inputs
        $request->validate([
            'operation_name' => 'required|string|max:255',
            'process' => 'required|string|max:255',
            'workstation' => 'required|string|max:255',
            'standard_hours' => 'required|numeric|min:0',
        ]);

        // Create a new ListedOperation record
        $operation = ListedOperation::create([
            'operation_name' => $request->operation_name,
            'process' => $request->process,
            'workstation' => $request->workstation,
            'standard_hours' => $request->standard_hours,
        ]);

        return response()->json([
            'operation' => $operation,
            'message' => 'Operation created successfully'
        ]);
    }

    // Method to update an existing Listed Operation (PUT request)
    public function updateOperation(Request $request, $id)
    {
        // Validate incoming request
        $validator = Validator::make($request->all(), [
            'operation_name' => 'required|string|max:255',
            'process' => 'required|string|max:255',
            'workstation' => 'required|string|max:255',
            'standard_hours' => 'required|numeric|min:0.1', // Ensure valid number for standard hours
        ]);

        // If validation fails, return errors
        if ($validator->fails()) {
            return response()->json(['errors' => $validator->errors()], 422);
        }

        // Find the operation by ID using the correct model
        $operation = ListedOperation::find($id); // Use ListedOperation here

        // If operation doesn't exist, return a 404 error
        if (!$operation) {
            return response()->json(['message' => 'Operation not found'], 404);
        }

        // Update the operation with the new data
        $operation->operation_name = $request->operation_name;
        $operation->process = $request->process;
        $operation->workstation = $request->workstation;
        $operation->standard_hours = $request->standard_hours;

        // Save the updated operation
        $operation->save();

        // Return a success response
        return response()->json(['message' => 'Operation updated successfully', 'operation' => $operation], 200);
    }
}

